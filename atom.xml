<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://minibreak7.github.io</id>
    <title>骆子豪の个人小站</title>
    <updated>2023-03-22T13:19:32.921Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://minibreak7.github.io"/>
    <link rel="self" href="https://minibreak7.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://minibreak7.github.io/images/avatar.png</logo>
    <icon>https://minibreak7.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, 骆子豪の个人小站</rights>
    <entry>
        <title type="html"><![CDATA[关于byte取值范围的思考]]></title>
        <id>https://minibreak7.github.io/post/guan-yu-short-qu-zhi-fan-wei-de-si-kao/</id>
        <link href="https://minibreak7.github.io/post/guan-yu-short-qu-zhi-fan-wei-de-si-kao/">
        </link>
        <updated>2022-10-27T14:11:33.000Z</updated>
        <content type="html"><![CDATA[<p>我们都知道在java中，byte占一个字节，一个字节由8位二进制数组成，首位为符号位，则取到的正数最大值是 <code>0111 1111</code> ，转换成十进制就是127，相反取到的负数最大值是 <code>1111 1111</code> ，转换成十进制就是-127。但是byte实际的取值范围是 [-128, 127]，由此引发了我的思考。</p>
<p>首先我们需要明确几个概念</p>
<p>原码：符号位加上数值的绝对值, 即用第一位表示符号, 其余位表示值</p>
<p>反码：正数的反码是其本身；负数的反码是在其原码的基础上，符号位不变，其余各个位取反</p>
<p>补码：正数的补码是其本身；负数的补码是在其原码的基础上，符号位不变，其余各位取反，最后+1（即在反码的基础上+1）</p>
<p>举例：</p>
<pre><code class="language-bash">[+1] = [00000001]原 = [00000001]反 = [00000001]补
[-1] = [10000001]原 = [11111110]反 = [11111111]补
</code></pre>
<p>在计算机中使用的是补码对数据进行存储和计算</p>
<p>接下来我们需要思考为何要使用原码，反码和补码</p>
<p>对于计算机，加减乘数已经是最基础的运算，要设计得尽量简单. 计算机辨别符号位显然会让计算机的基础电路设计变得十分复杂，于是人们想出了将符号位也参与运算的方法。根据运算法则减去一个正数等于加上一个负数，即: 1-1 = 1 + (-1) = 0 , 所以机器可以只有加法而没有减法, 这样计算机运算的设计就更简单了。</p>
<p>对于原码：</p>
<pre><code class="language-bash">1 - 1 = 1 + (-1) = [00000001]原 + [10000001]原 = [10000010]原 = -2
</code></pre>
<p>如果用原码表示，让符号位也参与计算，对于减法来说，结果是不正确的。这也就是为何计算机内部不使用原码表示一个数</p>
<p>为了解决原码做减法的问题，出现了反码，对于反码：</p>
<pre><code class="language-bash">1 - 1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原= [0000 0001]反 + [1111 1110]反 = [1111 1111]反 = [1000 0000]原 = -0
</code></pre>
<p>发现用反码计算减法，结果的绝对值是正确的，而唯一的问题其实就出现在 0 这个特殊的数值上。虽然人们理解上+0和-0是一样的，但是0带符号是没有任何意义的。而且会有 [0000 0000]原 和 [1000 0000]原 两个编码表示0。</p>
<p>补码的出现，解决了0的符号以及两个编码的问题，对于补码：</p>
<pre><code class="language-bash">1-1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原 = [0000 0001]补 + [1111 1111]补 = [0000 0000]补=[0000 0000]原
</code></pre>
<p>这样0用[0000 0000]表示, 而以前出现问题的-0则不存在了，而且可以用[1000 0000]表示-128，这也是byte能取到-128的原因。</p>
<pre><code class="language-bash">(-1) + (-127) = [1000 0001]原 + [1111 1111]原 = [1111 1111]补 + [1000 0001]补 = [1000 0000]补
</code></pre>
<p>-1-127的结果应该是-128，在用补码运算的结果中，[1000 0000]补 就是-128。</p>
<p>但是注意因为实际上是使用以前的-0的补码来表示-128，所以-128并没有原码和反码表示（对-128的补码表示[1000 0000]补算出来的原码是[0000 0000]原, 这是不正确的）</p>
<p>使用补码，不仅仅修复了0的符号以及存在两个编码的问题，而且还能够多表示一个最低数。这就是为什么8位二进制，使用原码或反码表示的范围为[-127, +127]，而使用补码表示的范围为[-128, 127]</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello myBlog]]></title>
        <id>https://minibreak7.github.io/post/hello-myblog/</id>
        <link href="https://minibreak7.github.io/post/hello-myblog/">
        </link>
        <updated>2022-10-15T09:05:09.000Z</updated>
        <content type="html"><![CDATA[<p>​       一直想搭建个博客，市面上有很多比较成熟的博客框架，例如有 <code>WordPress</code>、<code>hexo</code>、<code>hugo</code> 等等，无意间发现 <code>Gridea</code> 这个博客框架，也是比较符合自己的需求，部署简单，同步方便，不需要购买服务器和域名，算是节省了一小笔开支吧，作为个人的知识输出平台完全够用，所以今天就将这个博客搭建起来了。</p>
<p>​       之前对于知识的整理和记录都是一些零零散散的笔记，现在会将一些知识和自己的思考记录到博客中，起到温故知新的作用。当然，如果能帮助或者启发到一些朋友也是莫大的荣幸。</p>
]]></content>
    </entry>
</feed>